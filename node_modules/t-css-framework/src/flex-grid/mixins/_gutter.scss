//-------------------------
//GENERATE RESPONSIVE GUTTER
//Generate modifier classses to add responsive gutters to the grid.
//-------------------------
@mixin generateResponsiveGutter($breakpointsMap, $guttersList, $containerClassName, $rowClassName, $columnClassName, $gutterModifierName) {
  $i: 1;

  @each $key, $value in $breakpointsMap {
    @if $i == 1 {
      #{$columnClassName}#{$modifierSeparator}#{$gutterModifierName},
      #{$containerClassName}#{$modifierSeparator}#{$gutterModifierName} {
        padding-left : nth($guttersList, $i) / 2;
        padding-right: nth($guttersList, $i) / 2;
      }

      #{$rowClassName}#{$modifierSeparator}#{$gutterModifierName} {
        margin-left : -(nth($guttersList, $i) / 2);
        margin-right: -(nth($guttersList, $i) / 2);
      }
    } @else {
      @media screen and (min-width: $value) {
        #{$columnClassName}#{$modifierSeparator}#{$gutterModifierName},
        #{$containerClassName}#{$modifierSeparator}#{$gutterModifierName} {
          padding-left : nth($guttersList, $i) / 2;
          padding-right: nth($guttersList, $i) / 2;
        }

        #{$rowClassName}#{$modifierSeparator}#{$gutterModifierName} {
          margin-left : -(nth($guttersList, $i) / 2);
          margin-right: -(nth($guttersList, $i) / 2);
        }
      }
    }

    $i: $i + 1;
  }
}

//-------------------------
//RESET RESPONSIVE GUTTERS
// Generate modifier classes to reset grid's gutter responsively
//-------------------------
@mixin responsiveGutterReset($breakpointsMap, $containerClassName, $rowClassName, $columnClassName, $resetGutterModifierName) {
  $i   : 1;
  $keys: map-values($breakpointsMap);
  $l   : length($keys);

  @each $key, $value in $breakpointsMap {
    @if $i == 1 {
      @media screen and (max-width: nth($keys, $i + 1) - 1) {
        #{$columnClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName},
        #{$containerClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName} {
          padding-left : 0;
          padding-right: 0;
        }

        #{$rowClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName} {
          margin-left : 0;
          margin-right: 0;
        }
      }
    } @else 
    if $i < $l {
      @media screen and (min-width: $value) and (max-width: nth($keys, $i + 1) - 1) {
        #{$columnClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName},
        #{$containerClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName} {
          padding-left : 0;
          padding-right: 0;
        }

        #{$rowClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName} {
          margin-left : 0;
          margin-right: 0;
        }
      }
    } @else {
      @media screen and (min-width: $value) {
        #{$columnClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName},
        #{$containerClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName} {
          padding-left : 0;
          padding-right: 0;
        }

        #{$rowClassName}#{$modifierSeparator}#{$key}-#{$resetGutterModifierName} {
          margin-left : 0;
          margin-right: 0;
        }
      }
    }

    $i: $i + 1;
  }
}
